<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> hsp = 0;
 vsp = 0;
 delay =0;
 coll = 0;
global.point = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//vars
Key_Up = keyboard_check_direct(ord('W'));
Key_Down = keyboard_check_direct(ord('S'));
Key_Left = keyboard_check_direct(ord('D'));
Key_Right = keyboard_check_direct(ord('A'));
Key_UR = keyboard_check_direct(ord('W')) &amp;&amp; keyboard_check_direct(ord('D'));
Key_UL = keyboard_check_direct(ord('W')) &amp;&amp; keyboard_check_direct(ord('A'));
Key_DR = keyboard_check_direct(ord('S')) &amp;&amp; keyboard_check_direct(ord('D'));
Key_DL = keyboard_check_direct(ord('S')) &amp;&amp; keyboard_check_direct(ord('A'));

Key_Shoot = keyboard_check_direct(vk_space);
key_r = keyboard_check(ord('R'));
delay +=1;
movement = 10;

//debugging (remove later)
if (key_r)
{room_restart();}

//movement
if (Key_Left)
{   hsp = movement;}
if(Key_Right)
{   hsp = -movement;}
if(Key_Up){vsp = -movement;}
if (Key_Down){vsp = movement;}
//movement relese
if ((Key_Right &amp;&amp; Key_Left) or (!Key_Right &amp;&amp; !Key_Left))
{   hsp = 0;}
if ((Key_Up &amp;&amp; Key_Down) or (!Key_Up &amp;&amp; !Key_Down))
{   vsp = 0;}
//diagonal movements

if (Key_UR)
{  
    hsp = movement;
    vsp = -movement;
}
if (Key_UL)
{   hsp = -movement;
    vsp = -movement;}
if (Key_DR)
{  hsp = movement;
    vsp = movement; }
if (Key_DL)
{hsp = -movement;
    vsp = movement;}
//horisontal collision 
if place_meeting(x+hsp,y,par_wall)
{   while(!place_meeting(x+sign((hsp)+1),y,par_wall)) x+=sign((hsp)+1);
    hsp = 0;}
//vertical collision
    if place_meeting(x,y+vsp,par_wall)
{   while(!place_meeting(x,y +sign ((vsp)+1),par_wall)) y+=sign((vsp)+1);
    vsp = 0;
    coll =1;}
else 
{coll = 0;}

//shooting. delay is in events\create!
if (Key_Shoot)
 {if (delay &gt;=10)
    {   delay = 0;
        instance_create(x+32,y-64,obj_bullet);}
     }
//comits movement


//add vertical collision
  x += hsp;
  y += vsp;
  

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//CONTROLS

// Get your inputs
Key_Left = keyboard_check_direct(ord('A'));
Key_Right = keyboard_check_direct(ord('D'));
Key_Up = keyboard_check_direct(ord('W'));
Key_Down = keyboard_check_direct(ord('S'))
Key_Attk = keyboard_check_direct(vk_space);
var hup = 2.5;
var attk_var = 0;
var attk_lr = 0;
// Move left and right
if (Key_Left)
{    hsp = -5;
    image_xscale = -1;
    attk_lr = -32;}
if (Key_Right)
{   hsp = 5;
    image_xscale = 1;
    attk_lr = 32;}
//Diagonal duttons pushed
if (Key_Up &amp;amp;&amp;amp; Key_Right)
{   vsp = hup;
    hsp = hup;}
if (Key_Up &amp;amp;&amp;amp; Key_Left)
{   vsp = hup;
    hsp = -hup;} 
if (Key_Down &amp;amp;&amp;amp; Key_Right)
{   vsp = -hup;
    hsp = hup;}
if (Key_Down &amp;amp;&amp;amp; Key_Left)
{   vsp = -hup;
    hsp = -hup;}
//Up
if (Key_Up)
{   vsp = -5;
    attk_var = 32;}
if (Key_Down)
{   vsp = 5;
    attk_var = -32}
//Neutral input = 0 movement
if ((Key_Right &amp;amp;&amp;amp; Key_Left) or (!Key_Right &amp;amp;&amp;amp; !Key_Left))
{hsp = 0;}
if ((Key_Up &amp;amp;&amp;amp; Key_Down) or (!Key_Up &amp;amp;&amp;amp; !Key_Down))
{vsp = 0;}
//Vertical collition
if place_meeting(x,y+vsp,par_wall)
{   while (!place_meeting(x,y+2,par_wall)) y+=2;
    vsp = 0;
    coll = 1;}
else
{coll = 0;}
//Horizontal collition
if place_meeting(x+hsp,y,par_wall)
{   while(!place_meeting(x+sign((hsp)+1),y,par_wall)) x+=sign((hsp)+1);
    hsp = 0;}
if (Key_Attk)
{ instance_create(x + attk_lr,y + attk_var,obj_attk);   }
if (!Key_Attk)
{   with (obj_attk){instance_destroy();}}    
    
//Commit to movement
x += hsp;
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
